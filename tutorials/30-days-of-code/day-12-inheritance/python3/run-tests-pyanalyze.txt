PYTHONPATH=src pyanalyze --verbose --enable-all ./src
Checking file: ('./src/challenge/__init__.py', 17471)
./src/challenge/__init__.py took 0.00 s
Checking file: ('./src/challenge/main.py', 17471)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 18
  15: class Person:
  16:     """Person class"""
  17: 
  18:     def __init__(self, first_name: str, last_name: str, id_number: str):
          ^
  19: 
  20:         self.first_name: str = first_name.strip()
  21:         self.last_name: str = last_name.strip()

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 32
  29: 
  30:         return string
  31: 
  32:     def print_person(self):
          ^
  33:         """Show info about a person."""
  34: 
  35:         print(f"Name: {self.last_name}, {self.first_name}")

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 42
  39: class Student(Person):
  40:     """Inherits Person, adds scores and calculate()"""
  41: 
  42:     def __init__(self, first_name: str, last_name: str, id_number: str,
          ^
  43:                  scores: List[int]):
  44: 
  45:         super().__init__(first_name, last_name, id_number)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 77
  74:     Main challenge class.
  75:     """
  76: 
  77:     def __init__(self,
          ^
  78:                  student: Optional[Student] = None,
  79:                  quantity: Optional[int] = None):
  80: 

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 96
  93:         else:
  94:             self.quantity = 0
  95: 
  96:     def input_user(self):
          ^
  97:         """
  98:         Read an int without a prompt to keep things interesting.
  99:         """

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 117
 114:         else:
 115:             pass
 116: 
 117:     def input_quantity(self):
          ^
 118:         """
 119:         Read an int without a prompt to keep things interesting.
 120:         """

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 127
 124:         else:
 125:             pass
 126: 
 127:     def input_scores(self):
          ^
 128:         """
 129:         Read an int without a prompt to keep things interesting.
 130:         """

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 137
 134:         else:
 135:             pass
 136: 
 137:     def solve(self):
          ^
 138:         """Solves the challenge."""
 139: 
 140:         if self.student is not None:

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 145
 142:         else:
 143:             pass
 144: 
 145:     def print_results(self):
          ^
 146:         """Print the results of the challenge."""
 147: 
 148:         if self.student is not None and self.output != "":

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 154
 151:         else:
 152:             pass
 153: 
 154:     def main(self):
          ^
 155:         """
 156:         Challenge steps.
 157:         """
./src/challenge/main.py took 0.28 s
Checking file: ('./src/test/__init__.py', 17471)
./src/test/__init__.py took 0.00 s
Checking file: ('./src/test/test_main.py', 17471)

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 39
  36: 
  37: 
  38: @pytest.mark.parametrize("data,scores,expected", unit_test_data)
  39: def test_method_without_input(data: List[str], scores: List[int],
      ^
  40:                               expected: List[int], capsys):
  41:     """Runs the class methods against all of our test data."""
  42: 

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 102
  99: 
 100: 
 101: @pytest.mark.parametrize("data,scores,expected", unit_test_data)
 102: def test_method_with_input(data: List[str], scores: List[int],
      ^
 103:                            expected: List[int], capsys):
 104:     """Runs the class method against all of our test data."""
 105: 
Ignoring duplicate error (<ast.FunctionDef object at 0x7b0c82882260>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 39
  36: 
  37: 
  38: @pytest.mark.parametrize("data,scores,expected", unit_test_data)
  39: def test_method_without_input(data: List[str], scores: List[int],
      ^
  40:                               expected: List[int], capsys):
  41:     """Runs the class methods against all of our test data."""
  42: 
Ignoring duplicate error (<ast.FunctionDef object at 0x7b0c82877b80>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 102
  99: 
 100: 
 101: @pytest.mark.parametrize("data,scores,expected", unit_test_data)
 102: def test_method_with_input(data: List[str], scores: List[int],
      ^
 103:                            expected: List[int], capsys):
 104:     """Runs the class method against all of our test data."""
 105: 

Variable captured is not read after being written to (code: unused_variable)
In ./src/test/test_main.py at line 149
 146: 
 147:     code.solve()
 148: 
 149:     captured = capsys.readouterr()  # discard previous output
          ^
 150:     code.print_results()
 151:     captured = capsys.readouterr()  # capture new output
 152: 

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 166
 163: 
 164: 
 165: @pytest.mark.parametrize("data,scores,expected", unit_test_data)
 166: def test_script(data: str, scores: List[int], expected: List[int]):
      ^
 167:     """Runs the main script against all of our test data."""
 168: 
 169:     program_input: bytes = bytes(" ".join(data) + "\n", "utf8")
./src/test/test_main.py took 0.30 s

real	0m1.776s
user	0m1.451s
sys	0m0.163s

