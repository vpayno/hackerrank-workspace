PYTHONPATH=src pyanalyze --verbose --enable-all ./src
Checking file: ('./src/challenge/__init__.py', 31291)
./src/challenge/__init__.py took 0.00 s
Checking file: ('./src/challenge/main.py', 31291)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 22
  19:     Day 07 - Arrays
  20:     """
  21: 
  22:     def __init__(self, number: Optional[int] = None):
          ^
  23: 
  24:         self.number: int = 0
  25: 

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 33
  30:         else:
  31:             self.numbers = 0
  32: 
  33:     def input_number(self):
          ^
  34:         """
  35:         Read an int without a prompt to keep things interesting.
  36:         """

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 55
  52: 
  53:         return retval
  54: 
  55:     def solve(self):
          ^
  56:         """Solves the challenge."""
  57: 
  58:         self.output = self.factorial(self.number)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 60
  57: 
  58:         self.output = self.factorial(self.number)
  59: 
  60:     def print_results(self):
          ^
  61:         """Print the results of the challenge."""
  62: 
  63:         if "pytest" in sys.modules:
exception calling: (KnownValue(val=<function _Environ.__getitem__ at 0x7d4094b6fe20>), KeyError('OUTPUT_PATH'))
exception calling: (KnownValue(val=<function _Environ.__getitem__ at 0x7d4094b6fe20>), KeyError('OUTPUT_PATH'))

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 79
  76: 
  77:                 fptr.close()
  78: 
  79:     def main(self):
          ^
  80:         """
  81:         Challenge steps.
  82:         """
./src/challenge/main.py took 0.23 s
Checking file: ('./src/test/__init__.py', 31291)
./src/test/__init__.py took 0.00 s
Checking file: ('./src/test/test_main.py', 31291)

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 30
  27: 
  28: 
  29: @pytest.mark.parametrize("number,expected", unit_test_data)
  30: def test_method_without_input(number: int, expected: List[int], capsys):
      ^
  31:     """Runs the class methods against all of our test data."""
  32: 
  33:     captured_out: List[int]

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 57
  54: 
  55: 
  56: @pytest.mark.parametrize("number,expected", unit_test_data)
  57: def test_method_with_input(number: int, expected: List[int], capsys):
      ^
  58:     """Runs the class method against all of our test data."""
  59: 
  60:     captured_out: List[int]
Ignoring duplicate error (<ast.FunctionDef object at 0x7d4092b53790>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 30
  27: 
  28: 
  29: @pytest.mark.parametrize("number,expected", unit_test_data)
  30: def test_method_without_input(number: int, expected: List[int], capsys):
      ^
  31:     """Runs the class methods against all of our test data."""
  32: 
  33:     captured_out: List[int]
Ignoring duplicate error (<ast.FunctionDef object at 0x7d4092b520e0>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 57
  54: 
  55: 
  56: @pytest.mark.parametrize("number,expected", unit_test_data)
  57: def test_method_with_input(number: int, expected: List[int], capsys):
      ^
  58:     """Runs the class method against all of our test data."""
  59: 
  60:     captured_out: List[int]

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 85
  82: 
  83: 
  84: @pytest.mark.parametrize("number,expected", unit_test_data)
  85: def test_script(number: int, expected: List[int]):
      ^
  86:     """Runs the main script against all of our test data."""
  87: 
  88:     program_input: bytes = bytes(f"{number}\n", "utf8")
./src/test/test_main.py took 0.19 s

real	0m1.423s
user	0m1.294s
sys	0m0.136s

