PYTHONPATH=src pyanalyze --verbose --enable-all ./src
Checking file: ('./src/challenge/__init__.py', 9497)
./src/challenge/__init__.py took 0.00 s
Checking file: ('./src/challenge/main.py', 9497)

Missing type annotation for parameter title (code: missing_parameter_annotation)
In ./src/challenge/main.py at line 19
  16: class Book(metaclass=ABCMeta):
  17:     """Book class consisting of a title and author."""
  18: 
  19:     def __init__(self, title, author):
          ^
  20: 
  21:         self.title = title
  22:         self.author = author
Ignoring duplicate error (<ast.FunctionDef object at 0x793514fbfbb0>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 19
  16: class Book(metaclass=ABCMeta):
  17:     """Book class consisting of a title and author."""
  18: 
  19:     def __init__(self, title, author):
          ^
  20: 
  21:         self.title = title
  22:         self.author = author

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 31
  28: 
  29:     @staticmethod
  30:     @abstractmethod
  31:     def display():
          ^
  32:         """Abstract method."""
  33: 
  34: 

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 38
  35: class MyBook(Book):
  36:     """MyBook extends Book and adds price."""
  37: 
  38:     def __init__(self, title: str, author: str, price: int):
          ^
  39: 
  40:         super().__init__(title, author)
  41:         self.price: int = price

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 49
  46:         return (f"Title: {self.title}\n" + f"Author: {self.author}\n" +
  47:                 f"Price: {self.price}\n")
  48: 
  49:     def display(self):
          ^
  50:         """Implements book.display()."""
  51: 
  52:         print(self)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 60
  57:     Main challenge class.
  58:     """
  59: 
  60:     def __init__(self, mybook: Optional[MyBook] = None):
          ^
  61: 
  62:         self.mybook: Optional[MyBook]
  63: 

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 69
  66:         else:
  67:             self.mybook = None
  68: 
  69:     def input_book(self):
          ^
  70:         """
  71:         Read inputs without a prompt to keep things interesting.
  72:         """

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 87
  84:         else:
  85:             pass
  86: 
  87:     def print_results(self):
          ^
  88:         """Print the results of the challenge."""
  89: 
  90:         if self.mybook is not None:

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 95
  92:         else:
  93:             pass
  94: 
  95:     def main(self):
          ^
  96:         """
  97:         Challenge steps.
  98:         """
./src/challenge/main.py took 0.21 s
Checking file: ('./src/test/__init__.py', 9497)
./src/test/__init__.py took 0.00 s
Checking file: ('./src/test/test_main.py', 9497)

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 35
  32: 
  33: 
  34: @pytest.mark.parametrize("data,expected", unit_test_data)
  35: def test_method_without_input(data: List[str], expected: List[str], capsys):
      ^
  36:     """Runs the class methods against all of our test data."""
  37: 
  38:     captured_out: List[str]

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 69
  66: 
  67: 
  68: @pytest.mark.parametrize("data,expected", unit_test_data)
  69: def test_method_with_input(data: List[str], expected: List[str], capsys):
      ^
  70:     """Runs the class method against all of our test data."""
  71: 
  72:     captured_out: List[str]
Ignoring duplicate error (<ast.FunctionDef object at 0x793514622c20>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 35
  32: 
  33: 
  34: @pytest.mark.parametrize("data,expected", unit_test_data)
  35: def test_method_without_input(data: List[str], expected: List[str], capsys):
      ^
  36:     """Runs the class methods against all of our test data."""
  37: 
  38:     captured_out: List[str]
Ignoring duplicate error (<ast.FunctionDef object at 0x7935146210c0>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 69
  66: 
  67: 
  68: @pytest.mark.parametrize("data,expected", unit_test_data)
  69: def test_method_with_input(data: List[str], expected: List[str], capsys):
      ^
  70:     """Runs the class method against all of our test data."""
  71: 
  72:     captured_out: List[str]

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 106
 103: 
 104: 
 105: @pytest.mark.parametrize("data,expected", unit_test_data)
 106: def test_script(data: List[str], expected: List[str]):
      ^
 107:     """Runs the main script against all of our test data."""
 108: 
 109:     program_input: bytes = bytes("\n".join(data), "utf8")
./src/test/test_main.py took 0.21 s

Suggested type for parameter title (code: suggested_parameter_type)
  str

In ./src/challenge/main.py at line 19
  16: class Book(metaclass=ABCMeta):
  17:     """Book class consisting of a title and author."""
  18: 
  19:     def __init__(self, title, author):
                             ^
  20: 
  21:         self.title = title
  22:         self.author = author

Suggested type for parameter author (code: suggested_parameter_type)
  str

In ./src/challenge/main.py at line 19
  16: class Book(metaclass=ABCMeta):
  17:     """Book class consisting of a title and author."""
  18: 
  19:     def __init__(self, title, author):
                                    ^
  20: 
  21:         self.title = title
  22:         self.author = author

real	0m1.527s
user	0m1.308s
sys	0m0.133s

