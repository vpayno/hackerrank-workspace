PYTHONPATH=src pyanalyze --verbose --enable-all ./src
Checking file: ('./src/challenge/__init__.py', 822)
./src/challenge/__init__.py took 0.00 s
Checking file: ('./src/challenge/main.py', 822)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 20
  17:     Day 14 - Scope
  18:     """
  19: 
  20:     def __init__(self, numbers: List[int]):
          ^
  21:         self.numbers: List[int] = numbers
  22:         self.maximum_difference: int = 0
  23: 

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 29
  26: 
  27:         return f"Largest difference in {self.numbers} is {self.maximum_difference}\n"
  28: 
  29:     def compute_difference(self):
          ^
  30:         """Finds the maximum absolute difference between any  numbers in a list of numbers."""
  31: 
  32:         diff: int

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 46
  43:     Day 14 - Scope
  44:     """
  45: 
  46:     def __init__(self,
          ^
  47:                  quantity: Optional[int] = None,
  48:                  numbers: Optional[List[int]] = None):
  49: 

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 65
  62:         else:
  63:             self.numbers = []
  64: 
  65:     def input_quantity(self):
          ^
  66:         """
  67:         Read an int without a prompt to keep things interesting.
  68:         """

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 75
  72:         else:
  73:             pass
  74: 
  75:     def input_numbers(self):
          ^
  76:         """
  77:         Read a list of ints without a prompt to keep things interesting.
  78:         """

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 87
  84:         else:
  85:             pass
  86: 
  87:     def solve(self):
          ^
  88:         """Solves the challenge."""
  89: 
  90:         code = Difference(self.numbers)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 95
  92: 
  93:         self.output = code.maximum_difference
  94: 
  95:     def print_results(self):
          ^
  96:         """Print the results of the challenge."""
  97: 
  98:         print(self.output)

Missing function return annotation (code: missing_return_annotation)
In ./src/challenge/main.py at line 100
  97: 
  98:         print(self.output)
  99: 
 100:     def main(self):
          ^
 101:         """
 102:         Challenge steps.
 103:         """
./src/challenge/main.py took 0.45 s
Checking file: ('./src/test/__init__.py', 822)
./src/test/__init__.py took 0.00 s
Checking file: ('./src/test/test_main.py', 822)

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 51
  48: 
  49: 
  50: @pytest.mark.parametrize("quantity,numbers,expected", unit_test_data)
  51: def test_method_without_input(quantity: int, numbers: List[int],
      ^
  52:                               expected: List[int], capsys):
  53:     """Runs the class methods against all of our test data."""
  54: 

Missing type annotation for parameter capsys (code: missing_parameter_annotation)
In ./src/test/test_main.py at line 85
  82: 
  83: 
  84: @pytest.mark.parametrize("quantity,numbers,expected", unit_test_data)
  85: def test_method_with_input(quantity: int, numbers: List[int],
      ^
  86:                            expected: List[int], capsys):
  87:     """Runs the class methods against all of our test data."""
  88: 

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 30
  27: 
  28: 
  29: @pytest.mark.parametrize("quantity,numbers,expected", unit_test_data)
  30: def test_difference_class(quantity: int, numbers: List[int],
      ^
  31:                           expected: List[int]):
  32:     """Runs the class methods against all of our test data."""
  33: 
Ignoring duplicate error (<ast.FunctionDef object at 0x78dfedc4dcf0>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 51
  48: 
  49: 
  50: @pytest.mark.parametrize("quantity,numbers,expected", unit_test_data)
  51: def test_method_without_input(quantity: int, numbers: List[int],
      ^
  52:                               expected: List[int], capsys):
  53:     """Runs the class methods against all of our test data."""
  54: 
Ignoring duplicate error (<ast.FunctionDef object at 0x78dfedc4bee0>, <ErrorCode.missing_parameter_annotation: 63>)

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 85
  82: 
  83: 
  84: @pytest.mark.parametrize("quantity,numbers,expected", unit_test_data)
  85: def test_method_with_input(quantity: int, numbers: List[int],
      ^
  86:                            expected: List[int], capsys):
  87:     """Runs the class methods against all of our test data."""
  88: 

Missing function return annotation (code: missing_return_annotation)
In ./src/test/test_main.py at line 119
 116: 
 117: 
 118: @pytest.mark.parametrize("quantity,numbers,expected", unit_test_data)
 119: def test_script(quantity: int, numbers: List[int], expected: List[int]):
      ^
 120:     """Runs the main script against all of our test data."""
 121: 
 122:     program_input: bytes = bytes(f"{quantity}\n", "utf8")
./src/test/test_main.py took 0.36 s

real	0m2.554s
user	0m2.303s
sys	0m0.247s

